import jsonimport reimport pandas as pdfrom datetime import datetime, timedeltaimport openmeteo_requestsimport requests_cachefrom retry_requests import retryfrom clearCSV import clearCSVfrom prova import calculate_consumption_testcsv_files = [    'Dataset/Generale_Data_Center_Energia_Attiva.csv',    'Dataset/Generale_Edificio_Energia_Attiva.csv',    'Dataset/Impianto_Fotovoltaico_Energia_Attiva_Prodotta.csv']dfs = clearCSV(csv_files)def calculate_consumption():    consumption_dict = {}    for dataset in dfs:        consumption_dict[dataset] = calculate_consumption_test(dfs[dataset], dataset)    return consumption_dictdef hourly_consumption(consumption_per_date, name):    # Convert 'Date' column to datetime objects and set as index    consumption_per_date['Date'] = pd.to_datetime(consumption_per_date['Date'], format='%Y-%m-%d %H:%M:%S')    consumption_per_date.set_index('Date', inplace=True)    # Get the first and last 'Kilowatt' reading of each hour    hourly_first = consumption_per_date.resample('H').first()['Kilowatt']    hourly_last = consumption_per_date.resample('H').last()['Kilowatt']    # Calculate the difference between the last and the first reading    hourly_diff = hourly_last - hourly_first    # Reset the index to turn the datetime index back into a column    hourly_diff = hourly_diff.reset_index()    # Create a new 'Date' column that shows the range from first to last hour    hourly_diff['Date'] = hourly_diff['Date'].dt.strftime('%Y-%m-%d') + ' ' + \                          hourly_diff['Date'].dt.hour.astype(str).str.zfill(2) + ':00 -> ' + \                          (hourly_diff['Date'] + pd.Timedelta(hours=1)).dt.hour.astype(str).str.zfill(2) + ':00'    # Rename the 'Kilowatt' column to reflect that it shows the difference    hourly_diff.rename(columns={'Kilowatt': 'Kilowatt_Consumed'}, inplace=True)    # Add an 'ID' column with autoincrement values starting from 0    hourly_diff.insert(0, 'ID', range(len(hourly_diff)))    # Save the hourly difference to a CSV file, without the index    hourly_diff.to_csv(f'dataset_result/{name}_hourly_difference_consumption.csv', index=False)