import globimport osimport pandas as pdfrom clearCSV import clearCSVdef calculate_consumption():    directory_dataset_path = 'Dataset/'    csv_files = glob.glob(os.path.join(directory_dataset_path, '*.csv'))    dfs = clearCSV(csv_files)    consumption_dict = {}    for dataset in dfs:        consumption_dict[dataset] = calculate_consumption_in_time(dfs[dataset], dataset)    return consumption_dictdef calculate_consumption_in_time(consumption_per_date, name):    # Convert 'Date' column to datetime objects and set as index    consumption_per_date['Date'] = pd.to_datetime(consumption_per_date['Date'], format='%Y-%m-%d %H:%M:%S')    consumption_per_date.set_index('Date', inplace=True)    # Initialize a dictionary to hold the different consumption DataFrames    consumption_diffs = {}    # Calculate differences and format date ranges for hourly, daily, monthly, yearly    for freq in ['H', 'D', 'M', 'Y']:        if freq == 'H':            dataset_hour = consumption_per_date            dataset_hour = dataset_hour.reset_index()            dataset_hour['Date'] = pd.to_datetime(dataset_hour['Date'])            # Ordinamento dei dati per data e ora            dataset_hour.sort_values(by='Date', inplace=True)            consumption_per_hour = dataset_hour.groupby(dataset_hour['Date'].dt.date).apply(calculate_diff)            consumption_per_hour = consumption_per_hour.reset_index()            consumption_per_hour = consumption_per_hour.round(2)            if 'level_1' in consumption_per_hour.columns:                consumption_per_hour.rename(columns={'level_1': 'ID'}, inplace=True)            folder_path = f'dataset_result/consumption_timeslot/'            os.makedirs(folder_path, exist_ok=True)            consumption_per_hour.to_csv(os.path.join(folder_path, f'{name}_{freq.lower()}_consumption_timeslot.csv'),                                        index=True)        diff = consumption_per_date['Kilowatt'].resample(freq).last() - consumption_per_date['Kilowatt'].resample(            freq).first()        diff = diff.reset_index()        diff['Date'] = diff['Date'].apply(lambda x: format_date_range(x, freq))        diff.rename(columns={'Kilowatt': f'{freq}_Kilowatt_Consumed'}, inplace=True)        diff.insert(0, 'ID', range(len(diff)))        consumption_diffs[freq] = diff        folder_path = f'dataset_result/kilowatt_consumption/{freq}/'        os.makedirs(folder_path, exist_ok=True)        diff.to_csv(os.path.join(folder_path, f'{name}_{freq.lower()}_consumption.csv'), index=False)    return consumption_diffs# Calcolo delle differenze di consumo per ogni fascia orariadef calculate_diff(group):    group = group.set_index('Date')    morning_start, morning_end = get_start_end_values(group, 0, 9)    afternoon_start, afternoon_end = get_start_end_values(group, 9, 18)    night_start, night_end = get_start_end_values(group, 18, 23, 55)    return pd.Series({        '00-09': morning_end - morning_start if morning_end is not None and morning_start is not None else None,        '09-18': afternoon_end - afternoon_start if afternoon_end is not None and afternoon_start is not None else None,        '18-23:55': night_end - night_start if night_end is not None and night_start is not None else None    })# Funzione per ottenere l'ultimo e il primo valore di kilowatt in una fascia orariadef get_start_end_values(group, start_hour, end_hour, end_minute=59):    # Filtro per la fascia oraria    filtered_group = group.between_time(f'{start_hour}:00', f'{end_hour}:{end_minute}')    # valore della fascia oraria    end_value = filtered_group['Kilowatt'].iloc[-1] if not filtered_group.empty else None    # primo valore della fascia oraria    start_value = filtered_group['Kilowatt'].iloc[0] if not filtered_group.empty else None    return start_value, end_value# Format datedef format_date_range(start, frequ):    if frequ == 'H':        end = start + pd.Timedelta(hours=1)        return start.strftime('%Y-%m-%d %H:00 -> ') + end.strftime('%H:00')    elif frequ == 'D':        return start.strftime('%Y-%m-%d')    elif frequ == 'M':        return start.strftime('%Y-%m')    elif frequ == 'Y':        return start.strftime('%Y')